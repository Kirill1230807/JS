document.addEventListener('DOMContentLoaded', function() {
    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.getAttribute('data-tab');

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–º—ñ—Å—Ç—É –≤–∫–ª–∞–¥–∫–∏
            tabContents.forEach(content => content.classList.remove('active'));
            document.getElementById(tabId).classList.add('active');
        });
    });

    // –ü–µ—Ä–µ–º–∏–∫–∞—á –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è —É –≤–∏–¥—ñ —Ç–µ–∫—Å—Ç—É
    document.querySelectorAll('.toggle-password').forEach(toggle => {
        toggle.addEventListener('click', function() {
            const passwordInput = this.previousElementSibling;
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
        });
    });

    // –í–∏–±—ñ—Ä –∫—Ä–∞—ó–Ω–∏ —Ç–∞ –º—ñ—Å—Ç–∞
    const countrySelect = document.getElementById('country');
    const citySelect = document.getElementById('city');

    const citiesByCountry = {
        'Ukraine': ['–ö–∏—ó–≤', '–õ—å–≤—ñ–≤', '–û–¥–µ—Å–∞', '–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ'],
        'Poland': ['–í–∞—Ä—à–∞–≤–∞', '–ö—Ä–∞–∫—ñ–≤', '–ì–¥–∞–Ω—Å—å–∫', '–í—Ä–æ—Ü–ª–∞–≤', '–ü–æ–∑–Ω–∞–Ω—å'],
        'Germany': ['–ë–µ—Ä–ª—ñ–Ω', '–ú—é–Ω—Ö–µ–Ω', '–ì–∞–º–±—É—Ä–≥', '–ö–µ–ª—å–Ω', '–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç']
    };

    countrySelect.addEventListener('change', function() {
        citySelect.disabled = !this.value;
        citySelect.innerHTML = '<option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ --</option>';

        if (this.value) {
            citiesByCountry[this.value].forEach(city => {
                const option = document.createElement('option');
                option.value = city;
                option.textContent = city;
                citySelect.appendChild(option);
            });
        }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è
    function validateField(field, regex = null, customValidation = null) {
        const value = field.value.trim();
        const formGroup = field.closest('.form-group');
        const errorElement = formGroup.querySelector('.error-message');

        if (field.required && !value) {
            showError(field, errorElement, '–¶–µ –ø–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ');
            return false;
        }

        if (regex && value && !regex.test(value)) {
            showError(field, errorElement, getErrorMessage(field));
            return false;
        }

        if (customValidation && !customValidation(field)) {
            return false;
        }

        showSuccess(field, errorElement);
        return true;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ —ñ–º–µ–Ω—ñ
    function validateNameField(field) {
        const value = field.value.trim();
        const formGroup = field.closest('.form-group');
        const errorElement = formGroup.querySelector('.error-message');

        if (field.required && !value) {
            showError(field, errorElement, '–¶–µ –ø–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ');
            return false;
        }

        if (value.length < 3 || value.length > 15) {
            showError(field, errorElement, '–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 15 —Å–∏–º–≤–æ–ª—ñ–≤');
            return false;
        }

        const nameRegex = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë\s-]+$/;
        if (!nameRegex.test(value)) {
            showError(field, errorElement, '–î–æ–ø—É—Å—Ç–∏–º—ñ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –¥–µ—Ñ—ñ—Å –∞–±–æ –ø—Ä–æ–±—ñ–ª');
            return false;
        }

        showSuccess(field, errorElement);
        return true;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ö–æ–¥—è—Ç—å—Å—è –ø–∞—Ä–æ–ª—ñ
    function validatePasswordMatch() {
        const password = document.getElementById('password');
        const confirmPassword = document.getElementById('confirmPassword');
        const errorElement = confirmPassword.closest('.form-group').querySelector('.error-message');

        if (password.value !== confirmPassword.value) {
            showError(confirmPassword, errorElement, '–ü–∞—Ä–æ–ª—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏');
            return false;
        }

        showSuccess(confirmPassword, errorElement);
        return true;
    }

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–ª—è
    function getErrorMessage(field) {
        const fieldName = field.labels ? field.labels[0].textContent.replace(':', '') : '–ü–æ–ª–µ';

        if (field.id === 'email') {
            return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É email –∞–¥—Ä–µ—Å—É';
        }

        if (field.id === 'phone') {
            return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX';
        }

        if (field.id === 'birthDate') {
            return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è';
        }

        return '–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è';
    }

    // –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏
    function showError(field, errorElement, message) {
        field.classList.add('invalid');
        field.classList.remove('valid');
        if (errorElement) errorElement.textContent = message;
    }

    // –ü–æ–∫–∞–∑ —É—Å–ø—ñ—Ö—É
    function showSuccess(field, errorElement) {
        field.classList.add('valid');
        field.classList.remove('invalid');
        if (errorElement) errorElement.textContent = '';
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    const loginForm = document.getElementById('loginForm');
    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();
        let isValid = true;

        isValid = validateField(loginForm.username) && isValid;
        isValid = validateField(loginForm.password) && isValid;

        if (isValid) {
            const formData = new FormData(loginForm);
            const data = Object.fromEntries(formData.entries());

            // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É AJAX
            setTimeout(() => {
                document.getElementById('loginSuccess').textContent = '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!';
                loginForm.reset();

                loginForm.querySelectorAll('input').forEach(input => {
                    input.classList.remove('valid', 'invalid');
                });
            }, 1000);
        }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const registerForm = document.getElementById('registerForm');
    registerForm.addEventListener('submit', function(e) {
        e.preventDefault();
        let isValid = true;

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤
        isValid = validateNameField(registerForm.firstName) && isValid;
        isValid = validateNameField(registerForm.lastName) && isValid;

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        isValid = validateField(registerForm.email, emailRegex) && isValid;
        isValid = validateField(registerForm.password) && isValid;
        isValid = validatePasswordMatch() && isValid;

        const phoneRegex = /^\+380\d{9}$/;
        isValid = validateField(registerForm.phone, phoneRegex) && isValid;

        isValid = validateField(registerForm.birthDate, null, field => {
            const birthDate = new Date(field.value);
            const today = new Date();
            const minAgeDate = new Date(today.getFullYear() - 12, today.getMonth(), today.getDate());

            if (birthDate > today) {
                showError(field, field.closest('.form-group').querySelector('.error-message'), '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
                return false;
            }

            if (birthDate > minAgeDate) {
                showError(field, field.closest('.form-group').querySelector('.error-message'), '–í–∞–º –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 12 —Ä–æ–∫—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
                return false;
            }

            return true;
        }) && isValid;

        isValid = validateField(registerForm.sex[0]) && isValid;
        isValid = validateField(registerForm.sex[1]) && isValid;
        isValid = validateField(registerForm.country) && isValid;
        isValid = validateField(registerForm.city) && isValid;

        if (isValid) {
            const formData = new FormData(registerForm);
            const data = Object.fromEntries(formData.entries());

            // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É AJAX
            setTimeout(() => {
                document.getElementById('registerSuccess').textContent = '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!';
                registerForm.reset();

                registerForm.querySelectorAll('input, select').forEach(input => {
                    input.classList.remove('valid', 'invalid');
                });

                citySelect.disabled = true;
                citySelect.innerHTML = '<option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ --</option>';
            }, 1000);
        }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –∫–æ–ª–∏ –º–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–ª—è –≤–≤–æ–¥—É
    loginForm.username.addEventListener('blur', function() {
        validateField(this);
    });

    loginForm.password.addEventListener('blur', function() {
        validateField(this);
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –∫–æ–ª–∏ –º–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–ª—è –≤–≤–æ–¥—É
    registerForm.firstName.addEventListener('blur', function() {
        validateNameField(this);
    });

    registerForm.lastName.addEventListener('blur', function() {
        validateNameField(this);
    });

    registerForm.email.addEventListener('blur', function() {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        validateField(this, emailRegex);
    });

    registerForm.password.addEventListener('blur', function() {
        validateField(this);
    });

    registerForm.confirmPassword.addEventListener('blur', function() {
        validatePasswordMatch();
    });

    registerForm.password.addEventListener('input', function() {
        if (registerForm.confirmPassword.value) {
            validatePasswordMatch();
        }
    });

    registerForm.phone.addEventListener('blur', function() {
        const phoneRegex = /^\+380\d{9}$/;
        validateField(this, phoneRegex);
    });

    registerForm.birthDate.addEventListener('blur', function() {
        validateField(this, null, field => {
            const birthDate = new Date(field.value);
            const today = new Date();
            const minAgeDate = new Date(today.getFullYear() - 12, today.getMonth(), today.getDate());

            if (birthDate > today) {
                return false;
            }

            if (birthDate > minAgeDate) {
                return false;
            }

            return true;
        });
    });

    registerForm.country.addEventListener('change', function() {
        validateField(this);
    });

    registerForm.city.addEventListener('change', function() {
        validateField(this);
    });
});